CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)

IF(OS_WINDOWS)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/win.rc")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/winres.rc.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/icon.ico")
ELSEIF(OS_MACOSX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/osx/icon.icns")
ELSEIF(OS_LINUX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_FREEBSD)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_ANDROID)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/icon.png")
ENDIF(OS_WINDOWS)
GET_FILENAME_COMPONENT(ICON_FILE_IN_EXTENSION ${ICON_FILE_IN} EXT)
SET(ICON_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}${ICON_FILE_IN_EXTENSION})
CONFIGURE_FILE("${ICON_FILE_IN}" "${ICON_FILE}" COPYONLY)

INCLUDE(core/MediaConfig.cmake) #fix me

#module
ADD_SUBDIRECTORY(core)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(Snappy REQUIRED)
FIND_PACKAGE(JSON-C REQUIRED)

SET_DESKTOP_TARGET()

#project
SET(HEADERS_BANDWIDTH_CLIENT
  ${SOURCE_ROOT}/client/bandwidth/tcp_bandwidth_client.h
)
SET(SOURCES_BANDWIDTH_CLIENT
  ${SOURCE_ROOT}/client/bandwidth/tcp_bandwidth_client.cpp
)

SET(HEADERS_INNER_CLIENT
  ${SOURCE_ROOT}/client/inner/inner_tcp_server.h
  ${SOURCE_ROOT}/client/inner/inner_tcp_handler.h
  ${SOURCE_ROOT}/client/commands.h
)

SET(SOURCES_INNER_CLIENT
  ${SOURCE_ROOT}/client/inner/inner_tcp_server.cpp
  ${SOURCE_ROOT}/client/inner/inner_tcp_handler.cpp
  ${SOURCE_ROOT}/client/commands.cpp
)

# Config
SET(CONFIG_HWACCEL_METHOD "none" CACHE STRING "Hwaccel method")
SET(CONFIG_WIDTH 0 CACHE STRING "Hwaccel method")
SET(CONFIG_HEIGHT 0 CACHE STRING "Hwaccel method")
SET(CONFIG_POWER_OFF_ON_EXIT OFF CACHE BOOL "Power off device on exit")

SET(CONFIG_FILE_NAME ${PROJECT_NAME_LOWERCASE}.ini)
IF(OS_WINDOWS)
  SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
ELSEIF(OS_MACOSX)
  SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
ELSEIF(OS_LINUX OR OS_FREEBSD)
  SET(EXECUTABLE_FOLDER_PATH /usr/bin)
ENDIF(OS_WINDOWS)

SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${PROJECT_NAME_LOWERCASE} CACHE INTERNAL
  "Executable path: ${EXECUTABLE_PATH}") # for services

SET(APPLICATION_DIR "~/.${PROJECT_NAME_LOWERCASE}")
SET(LOG_FILE_NAME "${PROJECT_NAME_LOWERCASE}.log")

SET(CONFIG_FILE_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME}")
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/config.ini.in"
  ${CONFIG_FILE_GENERATED_PATH} @ONLY IMMEDIATE)

ADD_DEFINITIONS(
  -DLOG_FILE_NAME="${LOG_FILE_NAME}"
  -DAPPLICATION_DIR="${APPLICATION_DIR}"

  -DCONFIG_FILE_NAME="${CONFIG_FILE_NAME}"
)

FIND_PACKAGE(LircClient QUIET)
IF(LIRC_CLIENT_FOUND)
  ADD_DEFINITIONS(-DHAVE_LIRC)
  SET(DEPENDENS_CLIENT_SOURCES ${DEPENDENS_CLIENT_SOURCES} ${SOURCE_ROOT}/client/inputs/lirc_input_client.h)
  SET(DEPENDENS_CLIENT_HEADERS ${DEPENDENS_CLIENT_HEADERS} ${SOURCE_ROOT}/client/inputs/lirc_input_client.cpp)
  SET(DEPENDENS_CLIENT_INCLUDE_DIRS ${DEPENDENS_CLIENT_INCLUDE_DIRS} ${LIRC_CLIENT_INCLUDE_DIR})
  SET(DEPENDENS_CLIENT_LIBRARIES ${DEPENDENS_CLIENT_LIBRARIES} ${LIRC_CLIENT_LIBRARIES})
ENDIF(LIRC_CLIENT_FOUND)

SET(BUILD_PLAYER_SOURCES
  ${SOURCE_ROOT}/client/cmdutils.h
  ${SOURCE_ROOT}/client/cmdutils.cpp
  ${SOURCE_ROOT}/client/utils.h
  ${SOURCE_ROOT}/client/utils.cpp
  ${SOURCE_ROOT}/client/sdl_utils.h
  ${SOURCE_ROOT}/client/sdl_utils.cpp
  ${SOURCE_ROOT}/client/av_sdl_utils.h
  ${SOURCE_ROOT}/client/av_sdl_utils.cpp

  ${SOURCE_ROOT}/client/ffmpeg_application.h
  ${SOURCE_ROOT}/client/ffmpeg_application.cpp
  ${SOURCE_ROOT}/client/config.h
  ${SOURCE_ROOT}/client/config.cpp
  ${SOURCE_ROOT}/client/player_options.h
  ${SOURCE_ROOT}/client/player_options.cpp
  ${SOURCE_ROOT}/client/isimple_player.h
  ${SOURCE_ROOT}/client/isimple_player.cpp
  ${SOURCE_ROOT}/client/simple_player.h
  ${SOURCE_ROOT}/client/simple_player.cpp
  ${SOURCE_ROOT}/client/stream_handler.h
  ${SOURCE_ROOT}/client/stream_handler.cpp
)

SET(BUILD_CLIENT_SOURCES
  ${SOURCE_ROOT}/client/types.h
  ${SOURCE_ROOT}/client/types.cpp
  ${SOURCE_ROOT}/client/playlist_entry.h
  ${SOURCE_ROOT}/client/playlist_entry.cpp
  ${SOURCE_ROOT}/client/player_options.h
  ${SOURCE_ROOT}/client/player_options.cpp
  ${SOURCE_ROOT}/client/isimple_player.h
  ${SOURCE_ROOT}/client/isimple_player.cpp
  ${SOURCE_ROOT}/client/player.h
  ${SOURCE_ROOT}/client/player.cpp
  ${SOURCE_ROOT}/client/stream_handler.h
  ${SOURCE_ROOT}/client/stream_handler.cpp
  ${SOURCE_ROOT}/client/config.h
  ${SOURCE_ROOT}/client/config.cpp
  ${SOURCE_ROOT}/client/cmdutils.h
  ${SOURCE_ROOT}/client/cmdutils.cpp
  ${SOURCE_ROOT}/client/utils.h
  ${SOURCE_ROOT}/client/utils.cpp
  ${SOURCE_ROOT}/client/sdl_utils.h
  ${SOURCE_ROOT}/client/sdl_utils.cpp
  ${SOURCE_ROOT}/client/av_sdl_utils.h
  ${SOURCE_ROOT}/client/av_sdl_utils.cpp
  ${SOURCE_ROOT}/client/ioservice.h
  ${SOURCE_ROOT}/client/ioservice.cpp
  ${SOURCE_ROOT}/client/ffmpeg_application.h
  ${SOURCE_ROOT}/client/ffmpeg_application.cpp

  ${HEADERS_INNER_CLIENT} ${SOURCES_INNER_CLIENT}
  ${HEADERS_BANDWIDTH_CLIENT} ${SOURCES_BANDWIDTH_CLIENT}
  ${DEPENDENS_CLIENT_SOURCES} ${DEPENDENS_CLIENT_HEADERS}
)

SET(SIMPLE_PLAYER_NAME ${PROJECT_NAME}_player)
STRING(TOLOWER ${SIMPLE_PLAYER_NAME} SIMPLE_PLAYER_NAME_LOWERCASE)
SET(EXE_PLAYER_SOURCES ${SOURCE_ROOT}/client/player_main.cpp ${BUILD_PLAYER_SOURCES})
SET(OTHER_PLAYER_SOURCES ${ICON_FILE} ${RESOURCE_OS})

SET(TV_PLAYER_NAME ${PROJECT_NAME})
SET(EXE_TV_PLAYER_SOURCES ${SOURCE_ROOT}/client/tv_player_main.cpp ${BUILD_CLIENT_SOURCES})
SET(OTHER_TV_PLAYER_SOURCES ${ICON_FILE} ${RESOURCE_OS})

IF(NOT TARGET inih)
  ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/ini inih)
ENDIF(NOT TARGET inih)

SET(PRIVATE_INCLUDE_DIRECTORIES_CLIENT
  ${SOURCE_ROOT}
  ${CMAKE_CURRENT_BINARY_DIR}/core
  ${SOURCE_ROOT}/third-party/ini
  ${DEPENDENS_CLIENT_INCLUDE_DIRS}
  ${COMMON_INCLUDE_DIR}
  ${SNAPPY_INCLUDE_DIR}
  ${JSONC_INCLUDE_DIRS}
)

SET(PLAYER_LIBRARIES
  player_core
  ${FFMPEG_LIBRARIES}
  ${SDL2_LIBRARIES}
  ${DEPENDENS_LIBRARIES}
  ${COMMON_LIBRARIES}
  ${PLATFORM_LIBRARIES}
  ${BZIP2_LIBRARIES}
  ${ZLIB_LIBRARY}
  ${OPENSSL_LIBRARIES}
  inih
)

IF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)
  IF(OS_ANDROID)
    ADD_LIBRARY(${SIMPLE_PLAYER_NAME} SHARED ${EXE_TV_SOURCES} ${OTHER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${SIMPLE_PLAYER_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${SIMPLE_PLAYER_NAME}
      ${PLAYER_LIBRARIES}
    )

    ADD_LIBRARY(${TV_PLAYER_NAME} SHARED ${EXE_TV_SOURCES} ${OTHER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${TV_PLAYER_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${TV_PLAYER_NAME}
      ${PROJECT_CLIENT_SERVER_LIBRARY}
      ${PLAYER_LIBRARIES}
      ${DEPENDENS_CLIENT_LIBRARIES}
      ${SNAPPY_LIBRARIES}
      ${JSONC_LIBRARIES}
    )
  ELSE()
    ADD_EXECUTABLE(${SIMPLE_PLAYER_NAME} ${DESKTOP_TARGET} ${EXE_PLAYER_SOURCES} ${OTHER_PLAYER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${SIMPLE_PLAYER_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${SIMPLE_PLAYER_NAME}
      ${PLAYER_LIBRARIES}
    )

    ADD_EXECUTABLE(${TV_PLAYER_NAME} ${DESKTOP_TARGET} ${EXE_TV_PLAYER_SOURCES} ${OTHER_TV_PLAYER_SOURCES})
    TARGET_INCLUDE_DIRECTORIES(${TV_PLAYER_NAME} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT})
    TARGET_LINK_LIBRARIES(${TV_PLAYER_NAME}
      ${PROJECT_CLIENT_SERVER_LIBRARY}
      ${PLAYER_LIBRARIES}
      ${DEPENDENS_CLIENT_LIBRARIES}
      ${SNAPPY_LIBRARIES}
      ${JSONC_LIBRARIES}
    )
  ENDIF(OS_ANDROID)
ELSE()
  MESSAGE(FATAL_ERROR "NOT SUPPORTED COMPILER!!!")
ENDIF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)

IF(OS_WINDOWS)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES LANGUAGE RC)
ELSEIF(OS_MACOSX)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
  SET_SOURCE_FILES_PROPERTIES(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
ENDIF(OS_WINDOWS)

GET_FILENAME_COMPONENT(ICON_FILE_NAME ${ICON_FILE} NAME)
IF(OS_MACOSX)
  SET(MACOSX_BUNDLE_BUNDLE_NAME ${BUNDLE_BASE_NAME})
  SET(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME})
  SET(MACOSX_BUNDLE_INFO_STRING "${PROJECT_VERSION},${PROJECT_COPYRIGHT}" )
  SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${SHORT_VERSION}" )
  SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_COPYRIGHT ${PROJECT_COPYRIGHT})
  SET(MACOSX_BUNDLE_ICON_FILE ${ICON_FILE_NAME})
  SET(MACOSX_BUNDLE_PRINCIPAL_CLASS "NSApplication")
  #SET(MACOSX_MAIN_NIB_FILE "MainMenu")
ENDIF(OS_MACOSX)

#prepare executable
IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${PROJECT_NAME})
  STRIP_TARGET(${SIMPLE_PLAYER_NAME})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

# Start to install
VersionConf(${PROJECT_NAME} ${RESOURCE_OS_IN} ${RESOURCE_OS} ${ICON_FILE_NAME})
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)
INSTALL(TARGETS ${SIMPLE_PLAYER_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS) #
INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE RENAME LICENSE)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT)
INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG)

#share install
IF(LIRC_CLIENT_FOUND)
  SET(LIRCRC_CONFIG_NAME "lircrc.conf")
  SET(LIRCRC_CONFIG_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${LIRCRC_CONFIG_NAME}")
  SET(LIRCRC_CONFIG_PATH_RELATIVE ${SHARE_INSTALL_DESTINATION}/${LIRCRC_CONFIG_NAME})
  ADD_DEFINITIONS(-DLIRCRC_CONFIG_PATH_RELATIVE="${LIRCRC_CONFIG_PATH_RELATIVE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/hardware/lirc/${LIRCRC_CONFIG_NAME}.in"
    ${LIRCRC_CONFIG_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(FILES ${LIRCRC_CONFIG_GENERATED_PATH} DESTINATION
    ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)
ENDIF(LIRC_CLIENT_FOUND)

#config file
SET(CONFIG_FILE_PATH_RELATIVE ${SHARE_INSTALL_DESTINATION}/${CONFIG_FILE_NAME})
ADD_DEFINITIONS(-DCONFIG_FILE_PATH_RELATIVE="${CONFIG_FILE_PATH_RELATIVE}")
INSTALL(FILES ${CONFIG_FILE_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RUNTIME)
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/resources DESTINATION
  ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/fonts DESTINATION
  ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

IF(OS_WINDOWS)
  #find runtime zlib
  SET(SHARED_ZLIB_NAMES zlib1.dll z.dll zlib.dll zdll.dll zlibd.dll zlibd1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ZLIB_LIBRARY SHARED_ZLIB_NAMES)
  INSTALL(FILES ${SHARED_ZLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime bz
  SET(SHARED_BZ2_NAMES libbz2-1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_BZ2_LIBRARY SHARED_BZ2_NAMES)
  INSTALL(FILES ${SHARED_BZ2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime png
  SET(SHARED_PNG_NAMES libpng16-16.dll)
  FIND_RUNTIME_LIBRARY(SHARED_PNG_LIBRARY SHARED_PNG_NAMES)
  INSTALL(FILES ${SHARED_PNG_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime harfbuzz
  SET(SHARED_HARFBUZZ_NAMES libharfbuzz-0.dll)
  FIND_RUNTIME_LIBRARY(SHARED_HARFBUZZ_LIBRARY SHARED_HARFBUZZ_NAMES)
  INSTALL(FILES ${SHARED_HARFBUZZ_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime glib
  SET(SHARED_GLIB_NAMES libglib-2.0-0.dll)
  FIND_RUNTIME_LIBRARY(SHARED_GLIB_LIBRARY SHARED_GLIB_NAMES)
  INSTALL(FILES ${SHARED_GLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime intl
  SET(SHARED_INTL_NAMES libintl-8.dll)
  FIND_RUNTIME_LIBRARY(SHARED_INTL_LIBRARY SHARED_INTL_NAMES)
  INSTALL(FILES ${SHARED_INTL_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime pcre
  SET(SHARED_PCRE_NAMES libpcre-1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_PCRE_LIBRARY SHARED_PCRE_NAMES)
  INSTALL(FILES ${SHARED_PCRE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime iconv
  SET(SHARED_ICONV_NAMES libiconv-2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ICONV_LIBRARY SHARED_ICONV_NAMES)
  INSTALL(FILES ${SHARED_ICONV_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime graphite2
  SET(SHARED_GRAPHITE2_NAMES libgraphite2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_GRAPHITE2_LIBRARY SHARED_GRAPHITE2_NAMES)
  INSTALL(FILES ${SHARED_GRAPHITE2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime freetype
  SET(SHARED_FREETYPE_NAMES libfreetype-6.dll)
  FIND_RUNTIME_LIBRARY(SHARED_FREETYPE_LIBRARY SHARED_FREETYPE_NAMES)
  INSTALL(FILES ${SHARED_FREETYPE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
  
  #find runtime sdl2
  SET(SHARED_SDL2_NAMES SDL2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_LIBRARY SHARED_SDL2_NAMES)
  INSTALL(FILES ${SHARED_SDL2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime sdl2 image
  SET(SHARED_SDL2_IMAGE_NAMES SDL2_image.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_IMAGE_LIBRARY SHARED_SDL2_IMAGE_NAMES)
  INSTALL(FILES ${SHARED_SDL2_IMAGE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime sdl2 ttf
  SET(SHARED_SDL2_TTF_NAMES SDL2_ttf.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_TTF_LIBRARY SHARED_SDL2_TTF_NAMES)
  INSTALL(FILES ${SHARED_SDL2_TTF_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
ELSEIF(OS_MACOSX)
  SET(BUNDLE_PATH "${CMAKE_INSTALL_PREFIX}/${BUNDLE_NAME}")
  INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_LIBRARY})
  INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_IMAGE_LIBRARY})
  INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_TTF_LIBRARY})
ELSEIF(OS_LINUX OR OS_FREEBSD)
  GET_FILENAME_COMPONENT(LIBPNG_LIBRARY_WITHOUT_SYMLINK ${PNG_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(LIBPNG_LIBRARY_NAME ${LIBPNG_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".16" LIBPNG_LNNAME ${LIBPNG_LIBRARY_NAME})
  #libpng16.so.16
  INSTALL(FILES ${LIBPNG_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${LIBPNG_LNNAME} COMPONENT RUNTIME)

  GET_FILENAME_COMPONENT(SDL2_LIBRARY_WITHOUT_SYMLINK ${SDL2_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(SDL2_LIBRARY_NAME ${SDL2_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_LNNAME ${SDL2_LIBRARY_NAME})
  #libSDL2-2.0.so.0
  INSTALL(FILES ${SDL2_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_LNNAME} COMPONENT RUNTIME)

  GET_FILENAME_COMPONENT(SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK ${SDL2_IMAGE_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(SDL2_IMAGE_LIBRARY_NAME ${SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_IMAGE_LNNAME ${SDL2_IMAGE_LIBRARY_NAME})
  #libSDL2_image-2.0.so.0
  INSTALL(FILES ${SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_IMAGE_LNNAME} COMPONENT RUNTIME)

  GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_WITHOUT_SYMLINK ${SDL2_TTF_LIBRARY} REALPATH)
  GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_NAME ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} NAME)
  STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_TTF_LNNAME ${SDL2_TTF_LIBRARY_NAME})
  #libSDL2_ttf-2.0.so.0
  INSTALL(FILES ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_TTF_LNNAME} COMPONENT RUNTIME)

  IF(LIRC_CLIENT_FOUND)
    GET_FILENAME_COMPONENT(LIRC_LIBRARY_WITHOUT_SYMLINK ${LIRC_CLIENT_LIBRARY} REALPATH)
    GET_FILENAME_COMPONENT(LIRC_LIBRARY_NAME ${LIRC_LIBRARY_WITHOUT_SYMLINK} NAME)
    STRING(REGEX REPLACE "[^so]+$" ".0" LIRC_LNNAME ${LIRC_LIBRARY_NAME})
    #liblirc_client.so.0
    INSTALL(FILES ${LIRC_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${LIRC_LNNAME} COMPONENT RUNTIME)
  ENDIF(LIRC_CLIENT_FOUND)

  # exe script
  SET(START_SCRIPT_PLAYER_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${SIMPLE_PLAYER_NAME_LOWERCASE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/start_simple.sh.in" ${START_SCRIPT_PLAYER_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${START_SCRIPT_PLAYER_GENERATED_PATH} DESTINATION ${TARGET_INSTALL_DESTINATION})

  SET(START_SCRIPT_TV_PLAYER_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/start.sh.in" ${START_SCRIPT_TV_PLAYER_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${START_SCRIPT_TV_PLAYER_GENERATED_PATH} DESTINATION ${TARGET_INSTALL_DESTINATION})

  #share resources

  #xinitrc script
  SET(XINITRC_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/xinitrc")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/xinitrc.in"
    ${XINITRC_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(FILES ${XINITRC_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

  # auto_start script
  SET(AURO_START_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/autostart_${PROJECT_NAME_LOWERCASE}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/autostart.sh.in"
    ${AURO_START_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${AURO_START_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION})

  INSTALL(FILES ${RESOURCE_OS} DESTINATION ${SHARE_INSTALL_DESTINATION}/applications COMPONENT RESOURCES)
  INSTALL(FILES ${ICON_FILE} DESTINATION ${SHARE_INSTALL_DESTINATION}/icons COMPONENT RESOURCES)
ENDIF(OS_WINDOWS)

INSTALL_RUNTIME_LIBRARIES()

IF(DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_CLIENT
    ${BUILD_CLIENT_SOURCES}
    ${SOURCE_ROOT}/client/player_main.cpp
    ${SOURCE_ROOT}/client/tv_player_main.cpp
  )
  REGISTER_CHECK_STYLE_TARGET(check_style_client "${CHECK_SOURCES_CLIENT}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_NAME})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  IF(DEVELOPER_ENABLE_UNIT_TESTS)
    SET(PRIVATE_INCLUDE_DIRECTORIES_CLIENT_TEST
      ${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR} ${SOURCE_ROOT}
      ${COMMON_INCLUDE_DIR}
      ${JSONC_INCLUDE_DIRS}
    )

    SET(PROJECT_UNIT_TEST_CLIENT unit_tests_client)
    ADD_EXECUTABLE(${PROJECT_UNIT_TEST_CLIENT}
      ${CMAKE_SOURCE_DIR}/tests/unit_tests/client/test_parse_commands.cpp
      ${SOURCE_ROOT}/client/commands.cpp
    )
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_UNIT_TEST_CLIENT} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT_TEST})
    TARGET_LINK_LIBRARIES(${PROJECT_UNIT_TEST_CLIENT} gtest gtest_main
      ${PROJECT_CLIENT_SERVER_LIBRARY} ${COMMON_LIBRARIES} ${JSONC_LIBRARIES} ${PLATFORM_LIBRARIES}
    )
    ADD_TEST_TARGET(${PROJECT_UNIT_TEST_CLIENT})
    SET_PROPERTY(TARGET ${PROJECT_UNIT_TEST_CLIENT} PROPERTY FOLDER "Unit tests")
  ENDIF(DEVELOPER_ENABLE_UNIT_TESTS)
ENDIF(DEVELOPER_ENABLE_TESTS)
