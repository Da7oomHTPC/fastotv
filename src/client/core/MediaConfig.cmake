CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)

IF(OS_WINDOWS)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES ws2_32)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

# crossplatform libraries
FIND_PACKAGE(CUDA QUIET)
IF(CUDA_FOUND)
  ADD_DEFINITIONS(-DHAVE_CUDA)
  SET(HAVE_CUVID 1)
  SET(CONFIG_CUVID 1)
  SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${CUDA_INCLUDE_DIRS})
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CUDA_LIBRARIES})
ENDIF(CUDA_FOUND)

IF(OS_WINDOWS)
  FIND_PACKAGE(DirectX)
  IF(DirectX_FOUND)
    SET(DXVA2_FOUND ON)
    ADD_DEFINITIONS(-DHAVE_DXVA2)
    SET(HAVE_DXVA2_LIB 1)
    SET(CONFIG_DXVA2 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${DirectX_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${DIRECTX_INCLUDE_DIRS})
  ENDIF(DirectX_FOUND)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} secur32 vfw32 strmiids shlwapi)
ELSEIF(OS_MACOSX)
  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(SECURITY_LIBRARY Security)
  FIND_LIBRARY(QTKIT_LIBRARY QTKit)
  FIND_LIBRARY(AVFOUNDATION_LIBRARY AvFoundation)
  FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY AudioToolBox)
  FIND_LIBRARY(FOUNDATION_LIBRARY Foundation)
  FIND_LIBRARY(VIDEODECODE_LIBRARY VideoDecodeAcceleration)
  FIND_LIBRARY(QUARTZ_LIBRARY QuartzCore)
  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)

  FIND_LIBRARY(COREMEDIA_LIBRARY CoreMedia)
  FIND_LIBRARY(COREVIDEO_LIBRARY CoreVideo)
  FIND_LIBRARY(CORESERVICES_LIBRARY CoreServices)
  IF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)
    SET(HAVE_UTGETOSTYPEFROMSTRING 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CORESERVICES_LIBRARY})
  ENDIF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)

  FIND_LIBRARY(VIDEOTOOLBOX_LIBRARY VideoToolBox)
  IF (VIDEOTOOLBOX_LIBRARY)
    IF(VIDEODECODE_LIBRARY)
      ADD_DEFINITIONS(-DHAVE_VDA)
      SET(CONFIG_VDA 1)
    ENDIF(VIDEODECODE_LIBRARY)

    SET(VIDEOTOOLBOX_FOUND ON)
    SET(HAVE_VIDEOTOOLBOX 1)
    SET(CONFIG_VIDEOTOOLBOX 1)

    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VIDEOTOOLBOX_LIBRARY})
  ENDIF(VIDEOTOOLBOX_LIBRARY)

  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES
    ${PLATFORM_LIBRARIES}
    ${COCOA_LIBRARY}
    ${SECURITY_LIBRARY}
    ${QTKIT_LIBRARY}
    ${AVFOUNDATION_LIBRARY}
    ${AUDIOTOOLBOX_LIBRARY}
    ${COREVIDEO_LIBRARY}
    ${COREMEDIA_LIBRARY}
    ${FOUNDATION_LIBRARY}
    ${VIDEODECODE_LIBRARY}
    ${QUARTZ_LIBRARY}
    ${OPENGL_LIBRARY}
   )
ELSEIF(OS_LINUX)
  FIND_LIBRARY(VA_DRM_LIBRARY NAMES va-drm DOC "Path to va-drm library")
  IF(VA_DRM_LIBRARY)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_DRM_LIBRARY})
  ENDIF(VA_DRM_LIBRARY)
  FIND_LIBRARY(VA_X11_LIBRARY NAMES va-x11 DOC "Path to va-x11 library")
  IF(VA_X11_LIBRARY)
    SET(HAVE_VAAPI_X11 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_X11_LIBRARY})
  ENDIF(VA_X11_LIBRARY)

  FIND_PACKAGE(PkgConfig REQUIRED)

  FIND_PACKAGE(X11 QUIET)
  IF(X11_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${X11_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${X11_INCLUDE_DIR})
  ENDIF(X11_FOUND)
  FIND_PACKAGE(ALSA QUIET)
  IF(ALSA_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${ALSA_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${ALSA_INCLUDE_DIR})
  ENDIF(ALSA_FOUND)
  FIND_PACKAGE(Xv QUIET)
  IF(XV_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${XV_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${XV_INCLUDE_DIRS})
  ENDIF(XV_FOUND)

  # openmax
  FIND_LIBRARY(OPENMAXIL_LIBRARY
    NAMES openmaxil
    DOC "Path to OpenMAX IL library"
    PATHS /opt/vc/lib
  )
  FIND_PATH(OPENMAXIL_INCLUDE_DIR
    NAMES OMX_Core.h
    DOC "Openmax include directory"
    PATHS /opt/vc/include /opt/vc/include/IL
  )
  IF(OPENMAXIL_LIBRARY AND OPENMAXIL_INCLUDE_DIR)
    SET(CONFIG_OMX 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${OPENMAXIL_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${OPENMAXIL_INCLUDE_DIR})
  ENDIF(OPENMAXIL_LIBRARY AND OPENMAXIL_INCLUDE_DIR)

  # broadcom
  FIND_LIBRARY(BCM_HOST_LIBRARY
    NAMES bcm_host
    DOC "Path to Broadcom host library"
    PATHS /opt/vc/lib
  )
  FIND_PATH(BROADCOM_INCLUDE_DIR
    NAMES bcm_host.h
    DOC "Broadcom include directory"
    PATHS /opt/vc/include
  )
  IF(BCM_HOST_LIBRARY AND BROADCOM_INCLUDE_DIR)
    SET(CONFIG_OMX_RPI 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${BCM_HOST_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${BROADCOM_INCLUDE_DIR})

    # broadcom mmal
    FIND_LIBRARY(MMAL_CORE_LIBRARY
      NAMES mmal_core
      DOC "Path to Broadcom mmal core library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_CORE_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_CORE_LIBRARY})
    ENDIF(MMAL_CORE_LIBRARY)

    FIND_LIBRARY(MMAL_UTIL_LIBRARY
      NAMES mmal_util
      DOC "Path to Broadcom mmal util library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_UTIL_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_UTIL_LIBRARY})
    ENDIF(MMAL_UTIL_LIBRARY)

    FIND_LIBRARY(MMAL_VC_CLIENT_LIBRARY
      NAMES mmal_vc_client
      DOC "Path to Broadcom mmal vc client library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_VC_CLIENT_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_VC_CLIENT_LIBRARY})
    ENDIF(MMAL_VC_CLIENT_LIBRARY)
  ENDIF(BCM_HOST_LIBRARY AND BROADCOM_INCLUDE_DIR)

  PKG_CHECK_MODULES(VDPAU vdpau)
  IF(VDPAU_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VDPAU_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VDPAU_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VDPAU)
    SET(CONFIG_VDPAU 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VDPAU_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VDPAU_LIBRARIES})
  ENDIF(VDPAU_FOUND)

  PKG_CHECK_MODULES(VAAPI libva)
  IF(VAAPI_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VAAPI_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VAAPI_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VAAPI)
    SET(HAVE_VAAPI 1)
    SET(CONFIG_VAAPI 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VAAPI_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VAAPI_LIBRARIES})
  ENDIF(VAAPI_FOUND)

  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} dl m)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES})
ENDIF(OS_WINDOWS)

FIND_PACKAGE(FFmpeg REQUIRED)
FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(OpenSSL REQUIRED)

IF(FFMPEG_LIBAVFILTER)
  SET(CONFIG_AVFILTER 1)
ENDIF(FFMPEG_LIBAVFILTER)
IF (NOT CONFIG_AVFILTER)
  MESSAGE(FATAL_ERROR "REQUEIRED AVFILER SUPPORT!!!")
ENDIF(NOT CONFIG_AVFILTER)
IF(FFMPEG_LIBAVDEVICE)
  SET(CONFIG_AVDEVICE 1)
ENDIF(FFMPEG_LIBAVDEVICE)
IF(FFMPEG_LIBAVUTIL)
  SET(CONFIG_AVUTIL 1)
ENDIF(FFMPEG_LIBAVUTIL)
IF(FFMPEG_LIBAVCODEC)
  SET(CONFIG_AVCODEC 1)
ENDIF(FFMPEG_LIBAVCODEC)
IF(FFMPEG_LIBAVFORMAT)
  SET(CONFIG_AVFORMAT 1)
ENDIF(FFMPEG_LIBAVFORMAT)
IF(FFMPEG_LIBSWSCALE)
  SET(CONFIG_SWSCALE 1)
ENDIF(FFMPEG_LIBSWSCALE)
IF(FFMPEG_LIBSWRESAMPLE)
  SET(CONFIG_SWRESAMPLE 1)
ENDIF(FFMPEG_LIBSWRESAMPLE)
