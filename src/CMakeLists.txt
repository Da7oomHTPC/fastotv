INCLUDE (CheckIncludeFiles)

SET(HEADERS_CORE
  core/types.h
  core/utils.h
  core/clock.h
  core/packet_queue.h
  core/frame_queue.h
  core/decoder.h
  core/app_options.h
  core/audio_params.h
  core/stream.h
  core/ring_buffer.h
  core/audio_frame.h
  core/video_frame.h
)

SET(SOURCES_CORE
  core/types.cpp
  core/utils.cpp
  core/clock.cpp
  core/packet_queue.cpp
  core/frame_queue.cpp
  core/decoder.cpp
  core/app_options.cpp
  core/audio_params.cpp
  core/stream.cpp
  core/ring_buffer.cpp
  core/audio_frame.cpp
  core/video_frame.cpp
)

SET_DESKTOP_TARGET()

FIND_LIBRARY(VA_LIBRARY NAMES va)
IF(VA_LIBRARY)
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_LIBRARY})
ENDIF(VA_LIBRARY)
FIND_LIBRARY(VA_DRM_LIBRARY NAMES va-drm)
IF(VA_DRM_LIBRARY)
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_DRM_LIBRARY})
ENDIF(VA_DRM_LIBRARY)
FIND_LIBRARY(VA_X11_LIBRARY NAMES va-x11)
IF(VA_X11_LIBRARY)
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_X11_LIBRARY})
ENDIF(VA_X11_LIBRARY)

FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(FFmpeg REQUIRED)
find_package(PNG REQUIRED)

IF(FFMPEG_LIBAVFILTER)
  SET(CONFIG_AVFILTER 1)
ENDIF(FFMPEG_LIBAVFILTER)
IF(FFMPEG_LIBAVDEVICE)
  SET(CONFIG_AVDEVICE 1)
ENDIF(FFMPEG_LIBAVDEVICE)
IF(FFMPEG_LIBAVUTIL)
  SET(CONFIG_AVUTIL 1)
ENDIF(FFMPEG_LIBAVUTIL)
IF(FFMPEG_LIBAVCODEC)
  SET(CONFIG_AVCODEC 1)
ENDIF(FFMPEG_LIBAVCODEC)
IF(FFMPEG_LIBAVFORMAT)
  SET(CONFIG_AVFORMAT 1)
ENDIF(FFMPEG_LIBAVFORMAT)
IF(FFMPEG_LIBSWSCALE)
  SET(CONFIG_SWSCALE 1)
ENDIF(FFMPEG_LIBSWSCALE)
IF(FFMPEG_LIBSWRESAMPLE)
  SET(CONFIG_SWRESAMPLE 1)
ENDIF(FFMPEG_LIBSWRESAMPLE)

CHECK_INCLUDE_FILES("sys/resource.h;sys/time.h" HAVE_SYS_RESOURCE_H)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/ffmpeg_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/ffmpeg_config.h)

FIND_PACKAGE(LibLZMA)
IF(LIBLZMA_FOUND)
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${LIBLZMA_LIBRARIES})
  SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${LIBLZMA_INCLUDE_DIRS})
ENDIF(LIBLZMA_FOUND)

IF(OS_WINDOWS)
  FIND_PACKAGE(IConv REQUIRED)
  IF(ICONV_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${ICONV_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${ICONV_INCLUDE_DIR})
  ENDIF(ICONV_FOUND)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES secur32 vfw32 ws2_32 strmiids shlwapi)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  FIND_PACKAGE(X11 REQUIRED)
  IF(X11_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${X11_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${X11_INCLUDE_DIR})
  ENDIF(X11_FOUND)
  FIND_PACKAGE(ALSA)
  IF(ALSA_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${ALSA_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${ALSA_INCLUDE_DIR})
  ENDIF(ALSA_FOUND)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES dl m)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR} ${CMAKE_CURRENT_BINARY_DIR})
SET(INCLUDE_DIRS
 ${FFMPEG_INCLUDE_DIR}
 ${SDL2_INCLUDE_DIRS}
 ${PNG_INCLUDE_DIRS}
 ${X11_INCLUDE_DIR}
 ${DEPENDENS_INCLUDE_DIRS}
)

SOURCE_GROUP("Header Core Files" FILES ${HEADERS_CORE})
SOURCE_GROUP("Source Core Files" FILES ${SOURCES_CORE})
SOURCE_GROUP("Resources" FILES ${RESOURCE_OS})

# modules
SET(PROJECT_CORE_LIBRARY ${PROJECT_NAME_LOWERCASE}_core)

# core
ADD_SUBDIRECTORY(third-party/json-c)
ADD_LIBRARY(${PROJECT_CORE_LIBRARY} STATIC ${HEADERS_CORE} ${SOURCES_CORE})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_CORE_LIBRARY} PRIVATE ${INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${PROJECT_CORE_LIBRARY}
  ${FFMPEG_LIBRARIES}

  ${BZIP2_LIBRARIES}
  ${ZLIB_LIBRARY}
  ${SDL2_LIBRARIES}
  ${PNG_LIBRARIES}
  ${DEPENDENS_LIBRARIES}
  ${PLATFORM_LIBRARIES}
  common json-c
)

SET(MAIN_SOURCES
  video_state_handler.h video_state_handler.cpp
  player.h player.cpp
  video_state.h video_state.cpp
  cmdutils.h cmdutils.cpp
  url.h url.cpp
)
SET(EXE_SOURCES main.cpp ${MAIN_SOURCES})
SET(OTHER_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/ffmpeg_config.h ${RESOURCE_OS})

IF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)
  IF(OS_ANDROID)
    ADD_LIBRARY(${PROJECT_NAME} SHARED ${EXE_SOURCES} ${OTHER_SOURCES})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_CORE_LIBRARY})
  ELSE()
    ADD_EXECUTABLE(${PROJECT_NAME} ${DESKTOP_TARGET} ${EXE_SOURCES} ${OTHER_SOURCES})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_CORE_LIBRARY})
  ENDIF(OS_ANDROID)
ELSE()
  MESSAGE(FATAL_ERROR "NOT SUPPORTED COMPILER!!!")
ENDIF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)

IF(OS_WINDOWS)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES LANGUAGE RC)
ELSEIF(OS_MACOSX)
  SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
  SET_SOURCE_FILES_PROPERTIES(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
ENDIF(OS_WINDOWS)

GET_FILENAME_COMPONENT(ICON_FILE_NAME ${ICON_FILE} NAME)
IF(OS_MACOSX)
  SET(MACOSX_BUNDLE_BUNDLE_NAME ${PROJECT_NAME})
  SET(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME})
  SET(MACOSX_BUNDLE_INFO_STRING "${PROJECT_VERSION},${PROJECT_COPYRIGHT}" )
  SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${SHORT_VERSION}" )
  SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
  SET(MACOSX_BUNDLE_COPYRIGHT ${PROJECT_COPYRIGHT})
  SET(MACOSX_BUNDLE_ICON_FILE ${ICON_FILE_NAME})
ENDIF(OS_MACOSX)

#prepare executable
IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
  STRIP_TARGET(${PROJECT_NAME})
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

# Start to install
VersionConf(${PROJECT_NAME} ${RESOURCE_OS_IN} ${RESOURCE_OS} ${ICON_FILE_NAME})
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/LICENSE DESTINATION . COMPONENT LICENSE RENAME LICENSE OPTIONAL)
INSTALL(FILES ${CMAKE_SOURCE_DIR}/COPYRIGHT DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT OPTIONAL)
INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG OPTIONAL)

IF(OS_WINDOWS)
  #find runtime zlib
  SET(SHARED_ZLIB_NAMES zlib1.dll z.dll zlib.dll zdll.dll zlibd.dll zlibd1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ZLIB_LIBRARY SHARED_ZLIB_NAMES)
  INSTALL(FILES ${SHARED_ZLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime bz
  SET(SHARED_BZ2_NAMES libbz2-1.dll)
  FIND_RUNTIME_LIBRARY(SHARED_BZ2_LIBRARY SHARED_BZ2_NAMES)
  INSTALL(FILES ${SHARED_BZ2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime iconv
  SET(SHARED_ICONV_NAMES libiconv-2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_ICONV_LIBRARY SHARED_ICONV_NAMES)
  INSTALL(FILES ${SHARED_ICONV_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime lzma
  SET(SHARED_LZMA_NAMES liblzma-5.dll)
  FIND_RUNTIME_LIBRARY(SHARED_LZMA_LIBRARY SHARED_LZMA_NAMES)
  INSTALL(FILES ${SHARED_LZMA_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

  #find runtime sdl2
  SET(SHARED_SDL2_NAMES SDL2.dll)
  FIND_RUNTIME_LIBRARY(SHARED_SDL2_LIBRARY SHARED_SDL2_NAMES)
  INSTALL(FILES ${SHARED_SDL2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
ELSEIF(OS_MACOSX)
  SET(BUNDLE_NAME ${MACOSX_BUNDLE_BUNDLE_NAME}.app)
ELSEIF(OS_LINUX OR OS_FREEBSD)
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/start.sh.in" "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWERCASE}.sh" @ONLY IMMEDIATE)
  INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWERCASE}.sh DESTINATION ${TARGET_INSTALL_DESTINATION})
  INSTALL(FILES ${RESOURCE_OS} DESTINATION share/applications COMPONENT RESOURCES)
  INSTALL(FILES ${ICON_FILE} DESTINATION share/icons COMPONENT RESOURCES)
ENDIF(OS_WINDOWS)

INSTALL_RUNTIME_LIBRARIES()

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES ${HEADERS_CORE} ${SOURCES_CORE} ${EXE_SOURCES})
  REGISTER_CHECK_STYLE_TARGET(check_style "${CHECK_SOURCES}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_CORE_LIBRARY})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
########## PREPARE GTEST LIBRARY ##########
  ADD_DEFINITIONS(-DPROJECT_TEST_SOURCES_DIR="${CMAKE_SOURCE_DIR}/tests")
  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tests/gtest gtest)
  INCLUDE_DIRECTORIES(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})
########## PREPARE GTEST LIBRARY ##########

  ADD_EXECUTABLE(unit_tests
    #${CMAKE_SOURCE_DIR}/tests/unit_tests/test_fasto_objects.cpp
  )

  TARGET_LINK_LIBRARIES(unit_tests gtest gtest_main ${PROJECT_CORE_LIBRARY} common)
  ADD_TEST_TARGET(unit_tests)
  SET_PROPERTY(TARGET unit_tests PROPERTY FOLDER "Unit tests")

  #Mock tests
  ADD_EXECUTABLE(mock_tests
    #${CMAKE_SOURCE_DIR}/tests/mock_tests/test_connections.cpp
  )
  TARGET_LINK_LIBRARIES(mock_tests gmock gmock_main ${PROJECT_CORE_LIBRARY} common)
  ADD_TEST_TARGET(mock_tests)
  SET_PROPERTY(TARGET mock_tests PROPERTY FOLDER "Mock tests")
ENDIF(DEVELOPER_ENABLE_TESTS)
