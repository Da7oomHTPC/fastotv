SET(SOURCE_ROOT ${CMAKE_SOURCE_DIR}/src)

SET(SERVICE_HOST_NAME fastotv.com CACHE STRING "Service host name")
SET(SERVICE_HOST_PORT 7040 CACHE STRING "Service port")

ADD_DEFINITIONS(-DPROJECT_TEST_SOURCES_DIR="${CMAKE_SOURCE_DIR}/tests"
  -DSERVICE_HOST_NAME="${SERVICE_HOST_NAME}"
  -DSERVICE_HOST_PORT=${SERVICE_HOST_PORT}
)

IF(DEVELOPER_ENABLE_TESTS)
  IF(DEVELOPER_ENABLE_UNIT_TESTS)
    ########## PREPARE GTEST LIBRARY ##########
    ADD_SUBDIRECTORY(${CMAKE_HOME_DIRECTORY}/tests/googletest googletest)
    ########## PREPARE GTEST LIBRARY ##########
  ENDIF(DEVELOPER_ENABLE_UNIT_TESTS)
ENDIF(DEVELOPER_ENABLE_TESTS)

#module
SET(PROJECT_CLIENT_SERVER_LIBRARY ${PROJECT_NAME_LOWERCASE}_client_server)

SET(HEADERS_COMMANDS
  commands/commands.h
)

SET(SOURCES_COMMANDS
  commands/commands.cpp
)

SET(HEADERS_INNER
  inner/inner_server_command_seq_parser.h
  inner/inner_client.h
)

SET(SOURCES_INNER
  inner/inner_server_command_seq_parser.cpp
  inner/inner_client.cpp
)

SET(HEADERS_SERIALIZER
  serializer/iserializer.h
  serializer/json_serializer.h
)

SET(SOURCES_SERIALIZER
  serializer/iserializer.cpp
  serializer/json_serializer.cpp
)

SET(SOURCES_SDS
  third-party/sds/sds.c
)

SET(CLIENT_SERVER_SOURCES
  ping_info.h ${SOURCE_ROOT}/ping_info.cpp
  channels_info.h ${SOURCE_ROOT}/channels_info.cpp
  auth_info.h ${SOURCE_ROOT}/auth_info.cpp
  server_info.h ${SOURCE_ROOT}/server_info.cpp
  client_info.h ${SOURCE_ROOT}/client_info.cpp
  url.h ${SOURCE_ROOT}/url.cpp
  client_server_types.h ${SOURCE_ROOT}/client_server_types.cpp
) # server and client common sources

SET(CLIENT_SERVER_SOURCES
  ${HEADERS_COMMANDS} ${SOURCES_COMMANDS}
  ${HEADERS_INNER} ${SOURCES_INNER}
  ${HEADERS_SERIALIZER} ${SOURCES_SERIALIZER}
  ${CLIENT_SERVER_SOURCES}
)

SET(PRIVATE_INCLUDE_DIRECTORIES_CLIENT_SERVER
  ${SOURCE_ROOT}
  ${SOURCE_ROOT}/third-party/sds
)
ADD_LIBRARY(${PROJECT_CLIENT_SERVER_LIBRARY} STATIC ${CLIENT_SERVER_SOURCES} ${SOURCES_SDS})
TARGET_INCLUDE_DIRECTORIES(${PROJECT_CLIENT_SERVER_LIBRARY} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_CLIENT_SERVER})

IF(BUILD_CLIENT)  # build client
  ADD_SUBDIRECTORY(client)
ENDIF(BUILD_CLIENT)

IF(BUILD_SERVER)  # build server
  ADD_SUBDIRECTORY(server)
ENDIF(BUILD_SERVER)

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_CLIENT_SERVER
    ${CLIENT_SERVER_SOURCES}
  )
  REGISTER_CHECK_STYLE_TARGET(check_style_client_server "${CHECK_SOURCES_CLIENT_SERVER}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_CLIENT_SERVER_LIBRARY})
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  IF(DEVELOPER_ENABLE_UNIT_TESTS)
    FIND_PACKAGE(Common REQUIRED)
    SET(PROJECT_UNIT_TEST unit_tests)
    SET(PRIVATE_INCLUDE_DIRECTORIES_TEST
      ${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR} ${SOURCE_ROOT} ${COMMON_INCLUDE_DIR}
    )
    ADD_EXECUTABLE(${PROJECT_UNIT_TEST}
      ${CMAKE_SOURCE_DIR}/tests/unit_tests/test_serializer.cpp
      ${CMAKE_SOURCE_DIR}/tests/unit_tests/encode_decode.cpp
    )
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_UNIT_TEST} PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES_TEST})
    TARGET_LINK_LIBRARIES(${PROJECT_UNIT_TEST}
      gtest gtest_main
      ${PROJECT_CLIENT_SERVER_LIBRARY} ${COMMON_LIBRARIES} json-c
    )
    ADD_TEST_TARGET(${PROJECT_UNIT_TEST})
    SET_PROPERTY(TARGET ${PROJECT_UNIT_TEST} PROPERTY FOLDER "Unit tests")

    #Mock tests
    #ADD_EXECUTABLE(mock_tests
      #${CMAKE_SOURCE_DIR}/tests/mock_tests/test_connections.cpp
    #)
    #TARGET_LINK_LIBRARIES(mock_tests gmock gmock_main ${PROJECT_CORE_LIBRARY} common)
    #ADD_TEST_TARGET(mock_tests)
    #SET_PROPERTY(TARGET mock_tests PROPERTY FOLDER "Mock tests")
  ENDIF(DEVELOPER_ENABLE_UNIT_TESTS)
ENDIF(DEVELOPER_ENABLE_TESTS)
