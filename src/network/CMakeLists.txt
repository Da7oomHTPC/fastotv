CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)

SET(PROJECT_NETWORK_LIBRARY ${PROJECT_NAME_LOWERCASE}_network)

SET(HEADERS_IO
  io_server.h
  io_client.h
)

SET(SOURCES_IO
  io_server.cpp
  io_client.cpp
)

SET(HEADERS_NETWORK
  loop_controller.h
  event_loop.h
  types.h
  tcp/tcp_server.h
  tcp/tcp_client.h
)

SET(SOURCES_NETWORK
  loop_controller.cpp
  event_loop.cpp
  types.cpp
  tcp/tcp_server.cpp
  tcp/tcp_client.cpp
)

SET(LIBS_NETWORK

)

IF(OS_WINDOWS)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES ws2_32)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

INCLUDE_DIRECTORIES(${SOURCE_ROOT} ${SOURCE_ROOT}/third-party/libev/src)
ADD_SUBDIRECTORY(${SOURCE_ROOT}/third-party/libev libev)

ADD_LIBRARY(${PROJECT_NETWORK_LIBRARY} STATIC ${HEADERS_IO} ${HEADERS_NETWORK}
  ${SOURCES_IO} ${SOURCES_NETWORK})
TARGET_LINK_LIBRARIES(${PROJECT_NETWORK_LIBRARY} libev common ${PLATFORM_LIBRARIES})

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_NETWORK ${HEADERS_IO} ${HEADERS_NETWORK}
    ${SOURCES_IO} ${SOURCES_NETWORK})
  REGISTER_CHECK_STYLE_TARGET(check_style_network "${CHECK_SOURCES_NETWORK}")
  REGISTER_CHECK_INCLUDES_TARGET(${PROJECT_NAME})
ENDIF(DEVELOPER_CHECK_STYLE)
